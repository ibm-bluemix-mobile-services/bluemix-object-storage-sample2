# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.1"
  title: Object Storage Backend
host: localhost:10010
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
# consumes:
#   - application/*
# # format of the responses to the client (Accepts)
# produces:
# - application/json
# Describe your paths here
paths:
  /swagger:
    x-swagger-pipe: swagger_raw
  /public:
    x-swagger-router-controller: public
    # This is a HTTP operation
    get:
      operationId: listPublicContainer
      # Describe this verb here. Note: you can use markdown
      description: Retrieve a list of objects inside the *public* container
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          $ref: '#/responses/containerGet'
  /public/{object}:
    x-swagger-router-controller: public
    get:
      operationId: fetchPublicObject
      description: Retrieve the content of `object`
      parameters:
        - $ref: '#/parameters/getObject'
      responses:
        200:
          $ref: '#/responses/fetchObjectSuccess'
        404:
          $ref: '#/responses/objectNotExist'
        500:
          $ref: '#/responses/serverError'
    put:
      operationId: createPublicObject
      description: Store `object` inside the *public* container
      parameters:
        - $ref: '#/parameters/storeObject'
      responses:
        200:
          $ref: '#/responses/storeObjectSuccess'
        500:
          $ref: '#/responses/serverError'
    delete:
      operationId: deletePublicObject
      description: Delete `object` from the *public* container
      parameters:
        - $ref: '#/parameters/deleteObject'
      responses:
        200:
          $ref: '#/responses/deleteObjectSuccess'
        404:
          $ref: '#/responses/objectNotExist'
        500:
          $ref: '#/responses/serverError'
  /private:
    x-swagger-router-controller: private
    get:
      operationId: listPrivateContainer
      description: Retrieve a list of objects inside the user's container
      responses:
        200:
          $ref: '#/responses/containerGet'
  /private/{object}:
    x-swagger-router-controller: private
    get:
      operationId: fetchPrivateObject
      description: Retrieve the content of `object`
      parameters:
        - $ref: '#/parameters/getObject'
      responses:
        200:
          $ref: '#/responses/fetchObjectSuccess'
        404:
          $ref: '#/responses/objectNotExist'
        500:
          $ref: '#/responses/serverError'
    put:
      operationId: createPrivateObject
      description: Store `object` inside the user's container
      parameters:
        - $ref: '#/parameters/storeObject'
      responses:
        200:
          $ref: '#/responses/storeObjectSuccess'
        500:
          $ref: '#/responses/serverError'
    delete:
      operationId: deletePrivateObject
      description: Delete `object` from the user's container
      parameters: 
        - $ref: '#/parameters/deleteObject'
      responses:
        200:
          $ref: '#/responses/deleteObjectSuccess'
        404:
          $ref: '#/responses/objectNotExist'
        500:
          $ref: '#/responses/serverError'
definitions:
  containerGet:
    title: ArrayOfObjects
    type: array
    items:
      type: object
      properties:
        name:
          type: string  
parameters:
  getObject:
    name: object
    in: path
    description: The name of the object to retrieve
    required: true
    type: string
  storeObject:
    name: object
    in: path
    description: The name of the object to store
    required: true
    type: string
  deleteObject:
    name: object
    in: path
    description: The name of the object to delete
    required: true
    type: string 
responses:
  storeObjectSuccess:
    description: >-
     `object` was successfully stored in the container
  deleteObjectSuccess:
    description: >-
     `object` was successfully deleted from the container
  fetchObjectSuccess:
    description: >-
     `object` was successfully retrieved from the ocontainer
  objectNotExist:
    description: >-
     `object` does not exist in the container
  serverError:
    description: Server Error
    schema:
      type: string
  containerGet:
    description: An array of objects in the container
    schema:
      $ref: '#/definitions/containerGet'